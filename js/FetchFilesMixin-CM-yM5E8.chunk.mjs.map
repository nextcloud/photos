{"version":3,"file":"FetchFilesMixin-CM-yM5E8.chunk.mjs","sources":["../src/mixins/FetchFilesMixin.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { showError } from '@nextcloud/dialogs'\nimport { defaultRootPath } from '@nextcloud/files/dav'\nimport { t } from '@nextcloud/l10n'\nimport { joinPaths } from '@nextcloud/paths'\nimport { defineComponent } from 'vue'\nimport { davClient } from '../services/DavClient.ts'\nimport logger from '../services/logger.js'\nimport getPhotos, { type PhotoSearchOptions } from '../services/PhotoSearch.js'\nimport store from '../store/index.js'\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js'\nimport AbortControllerMixin from './AbortControllerMixin.js'\n\nexport default defineComponent({\n\tname: 'FetchFilesMixin',\n\n\tmixins: [AbortControllerMixin],\n\n\tdata() {\n\t\treturn {\n\t\t\terrorFetchingFiles: null as null | number | Error | unknown,\n\t\t\tloadingFiles: false,\n\t\t\tdoneFetchingFiles: false,\n\t\t\tfetchSemaphore: new SemaphoreWithPriority(1),\n\t\t\tfetchedFileIds: [] as number[],\n\t\t}\n\t},\n\n\twatch: {\n\t\t'$route.path': function() {\n\t\t\tthis.resetFetchFilesState()\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * @param options - Options to pass to getPhotos.\n\t\t * @param blacklist - Array of ids to filter out.\n\t\t * @param force - Force fetching even if doneFetchingFiles is true\n\t\t * @return The next batch of data depending on global offset.\n\t\t */\n\t\tasync fetchFiles(options: Partial<PhotoSearchOptions> = {}, blacklist: number[] = [], force: boolean = false): Promise<number[]> {\n\t\t\tif ((this.doneFetchingFiles && !force) || this.loadingFiles) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst signal = this.abortController.signal\n\t\t\tconst fetchSemaphoreSymbol = await this.fetchSemaphore.acquire()\n\n\t\t\ttry {\n\t\t\t\tthis.errorFetchingFiles = null\n\t\t\t\tthis.loadingFiles = true\n\n\t\t\t\tconst numberOfImagesPerBatch = 200\n\n\t\t\t\t// Load next batch of images\n\t\t\t\tconst fetchedFiles = await getPhotos({\n\t\t\t\t\tfirstResult: this.fetchedFileIds.length,\n\t\t\t\t\tnbResults: numberOfImagesPerBatch,\n\t\t\t\t\t...options,\n\t\t\t\t\tsignal,\n\t\t\t\t})\n\n\t\t\t\t// If we get less files than requested that means we got to the end\n\t\t\t\tif (fetchedFiles.length !== numberOfImagesPerBatch) {\n\t\t\t\t\tthis.doneFetchingFiles = true\n\t\t\t\t}\n\n\t\t\t\tconst fileIds = fetchedFiles\n\t\t\t\t\t.map((file) => file.fileid as number)\n\t\t\t\t\t.filter((fileId) => !this.fetchedFileIds.includes(fileId)) // Filter to prevent duplicate fileIds.\n\n\t\t\t\tthis.fetchedFileIds.push(...fileIds.filter((fileId) => !blacklist.includes(fileId)))\n\n\t\t\t\tthis.$store.dispatch('appendFiles', fetchedFiles)\n\n\t\t\t\tlogger.debug(`[FetchFilesMixin] Fetched ${fileIds.length} new files: `, { fileIds })\n\n\t\t\t\treturn fileIds\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tconst sources = store.state.userConfig.photosSourceFolders\n\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\tif (error.response?.data?.match(`File with name /${source} could not be located`) === null) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogger.debug(`The ${source} folder does not exist, creating it.`)\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait davClient.createDirectory(joinPaths(defaultRootPath, source))\n\t\t\t\t\t\t\tthis.resetFetchFilesState()\n\t\t\t\t\t\t\treturn []\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.errorFetchingFiles = 404\n\t\t\t\t\t\t\tlogger.error('Fail to create source directory', { error })\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (error instanceof DOMException && error.code === error.ABORT_ERR) {\n\t\t\t\t\treturn []\n\t\t\t\t} else {\n\t\t\t\t\tthis.errorFetchingFiles = error\n\t\t\t\t}\n\n\t\t\t\t// cancelled request, moving on...\n\t\t\t\tshowError(t('photos', 'Error fetching files'))\n\t\t\t\tlogger.error(t('photos', 'Error fetching files'), { error })\n\t\t\t} finally {\n\t\t\t\tthis.loadingFiles = false\n\t\t\t\tthis.fetchSemaphore.release(fetchSemaphoreSymbol)\n\t\t\t}\n\n\t\t\treturn []\n\t\t},\n\n\t\tresetFetchFilesState() {\n\t\t\tthis.abortPendingRequest()\n\t\t\tthis.doneFetchingFiles = false\n\t\t\tthis.errorFetchingFiles = null\n\t\t\tthis.loadingFiles = false\n\t\t\tthis.fetchedFileIds = []\n\t\t},\n\t},\n})\n"],"names":["store","error","t"],"mappings":";;;;;;AAiBA,MAAA,kBAAe,gBAAgB;AAAA,EAC9B,MAAM;AAAA,EAEN,QAAQ,CAAC,oBAAoB;AAAA,EAE7B,OAAO;AACC,WAAA;AAAA,MACN,oBAAoB;AAAA,MACpB,cAAc;AAAA,MACd,mBAAmB;AAAA,MACnB,gBAAgB,IAAI,sBAAsB,CAAC;AAAA,MAC3C,gBAAgB,CAAA;AAAA,IACjB;AAAA,EACD;AAAA,EAEA,OAAO;AAAA,IACN,eAAe,WAAW;AACzB,WAAK,qBAAqB;AAAA,IAAA;AAAA,EAE5B;AAAA,EAEA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOR,MAAM,WAAW,UAAuC,IAAI,YAAsB,CAAI,GAAA,QAAiB,OAA0B;AAChI,UAAK,KAAK,qBAAqB,CAAC,SAAU,KAAK,cAAc;AAC5D,eAAO,CAAC;AAAA,MAAA;AAGH,YAAA,SAAS,KAAK,gBAAgB;AACpC,YAAM,uBAAuB,MAAM,KAAK,eAAe,QAAQ;AAE3D,UAAA;AACH,aAAK,qBAAqB;AAC1B,aAAK,eAAe;AAEpB,cAAM,yBAAyB;AAGzB,cAAA,eAAe,MAAM,UAAU;AAAA,UACpC,aAAa,KAAK,eAAe;AAAA,UACjC,WAAW;AAAA,UACX,GAAG;AAAA,UACH;AAAA,QAAA,CACA;AAGG,YAAA,aAAa,WAAW,wBAAwB;AACnD,eAAK,oBAAoB;AAAA,QAAA;AAG1B,cAAM,UAAU,aACd,IAAI,CAAC,SAAS,KAAK,MAAgB,EACnC,OAAO,CAAC,WAAW,CAAC,KAAK,eAAe,SAAS,MAAM,CAAC;AAE1D,aAAK,eAAe,KAAK,GAAG,QAAQ,OAAO,CAAC,WAAW,CAAC,UAAU,SAAS,MAAM,CAAC,CAAC;AAE9E,aAAA,OAAO,SAAS,eAAe,YAAY;AAEhD,eAAO,MAAM,6BAA6B,QAAQ,MAAM,gBAAgB,EAAE,SAAS;AAE5E,eAAA;AAAA,eACC,OAAO;AACX,YAAA,MAAM,UAAU,WAAW,KAAK;AAC7B,gBAAA,UAAUA,YAAM,MAAM,WAAW;AACvC,qBAAW,UAAU,SAAS;AACzB,gBAAA,MAAM,UAAU,MAAM,MAAM,mBAAmB,MAAM,uBAAuB,MAAM,MAAM;AAC3F;AAAA,YAAA;AAEM,mBAAA,MAAM,OAAO,MAAM,sCAAsC;AAC5D,gBAAA;AACH,oBAAM,UAAU,gBAAgB,UAAU,iBAAiB,MAAM,CAAC;AAClE,mBAAK,qBAAqB;AAC1B,qBAAO,CAAC;AAAA,qBACAC,QAAO;AACf,mBAAK,qBAAqB;AAC1B,qBAAO,MAAM,mCAAmC,EAAE,OAAAA,QAAO;AAAA,YAAA;AAAA,UAC1D;AAAA,QACD,WACU,iBAAiB,gBAAgB,MAAM,SAAS,MAAM,WAAW;AAC3E,iBAAO,CAAC;AAAA,QAAA,OACF;AACN,eAAK,qBAAqB;AAAA,QAAA;AAIjB,kBAAAC,UAAE,UAAU,sBAAsB,CAAC;AAC7C,eAAO,MAAMA,UAAE,UAAU,sBAAsB,GAAG,EAAE,OAAO;AAAA,MAAA,UAC1D;AACD,aAAK,eAAe;AACf,aAAA,eAAe,QAAQ,oBAAoB;AAAA,MAAA;AAGjD,aAAO,CAAC;AAAA,IACT;AAAA,IAEA,uBAAuB;AACtB,WAAK,oBAAoB;AACzB,WAAK,oBAAoB;AACzB,WAAK,qBAAqB;AAC1B,WAAK,eAAe;AACpB,WAAK,iBAAiB,CAAC;AAAA,IAAA;AAAA,EACxB;AAEF,CAAC;"}